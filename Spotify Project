# For this project, I downloaded Spotify data from Kaggle, then created a table to insert Spotify data into.

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#Determine the avg popularity and energy by artist and track:

SELECT
artist_name, track_name, avg(popularity), avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name

#Top ten artists:

SELECT artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity
LIMIT 10

#Most popular songs:

SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc;

#Average tempo of popular songs:

SELECT artist_name, track_name,
CASE WHEN tempo>150 then "high"
WHEN tempo>100 then "average"
ELSE "low" 
END AS "Tempo Category"
FROM BIT_DB.Spotifydata;
